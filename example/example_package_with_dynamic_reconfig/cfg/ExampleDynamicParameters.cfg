#! /usr/bin/env python

PACKAGE = 'example_package_with_dynamic_reconfig'

from dynamic_reconfigure.parameter_generator_catkin import *

gen = ParameterGenerator()

#        Name            Type      Level  Description                           Default   Min       Max

gen.add("num_steps", int_t, 0, "Number of steps", 50, 20, 200)
gen.add("unlimited_int", int_t, 0, "Unlimited int parameter", 33)
gen.add("wait_time", double_t, 0, "Wait time in seconds", 1.0, 0.001, 2)
gen.add("str_param",    str_t,    0, "A string parameter",  "Hello World")

gen.add("enable_button",   bool_t,   0, "Boolean flag to enable feature Z",  False)

enable_disable_enum = gen.enum([gen.const("disabled", int_t, 0, ""), gen.const("enabled", int_t, 1, "")], "")
gen.add("feature_x", int_t, 0, "This feature does magic.", 0, 0, 1, edit_method=enable_disable_enum)

size_enum = gen.enum([ gen.const("Small",      int_t, 0, "A small constant"),
                       gen.const("Medium",     int_t, 1, "A medium constant"),
                       gen.const("Large",      int_t, 2, "A large constant"),
                       gen.const("ExtraLarge", int_t, 3, "An extra large constant")],
                     "An enum to set size")

gen.add("size", int_t, 0, "A size parameter which is edited via an enum", 1, 0, 3, edit_method=size_enum)

group_x = gen.add_group("group_x")
group_x.add("x_a", int_t, 0, "An int within group X", 0, 0, 2)
group_x.add("x_b", int_t, 0, "An int within group X", 0, -1, 3)


group_y = gen.add_group("group_y")
group_y.add("y_c", bool_t, 0, "A bool within group Y", True)
group_y.add("y_d", bool_t, 0, "A bool within group Y", False)

# PkgName  #NodeName         #Prefix for generated .h include file, e.g. ParametersConfig.py
exit(gen.generate(PACKAGE, "example_package_with_dynamic_reconfig", "ExampleDynamicParameters"))
